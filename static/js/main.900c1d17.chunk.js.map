{"version":3,"sources":["data/nodes.csv","components/MapNodes.js","components/TXList.js","components/TXs.js","components/WorldMap.js","components/TXNodes.js","helpers/txNodes.js","helpers/processData.js","images/corner.svg","images/cancel.svg","images/play.svg","images/pause.svg","components/TXViz.js","hooks/useWindowDimensions.js","components/SearchBox.js","images/decorationTop.svg","images/decorationBottom.svg","images/legend.svg","App.js","reportWebVitals.js","index.js"],"names":["MapNodes","props","txsInfo","scaleInfo","projection","centerStyle","m","Map","s","Set","i","set","toString","node","hash","get","add","txNum","size","d3","data","then","nodeGeoInfo","remove","append","attr","selectAll","enter","d","long","lat","id","style","className","TXList","txs","txList","txVizHashChanger","listItems","keys","txKey","unix_timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","listItem","onClick","color","fontSize","push","TXs","useState","setTxList","setTxsInfo","ws","WebSocket","initWebsocket","onopen","console","log","send","onmessage","evt","txInfo","JSON","parse","currTime","now","filter","tx","timestamp","txHash","Number","newTx","has","slice","onerror","onclose","useEffect","close","WorldMap","worldMap","useRef","path","geoPath","pointRadius","mapData","topojson","countriesData","objects","countries","features","current","ref","TXNodes","vizContainer","width","height","nodes","translateX","translateY","map","radius","initialAngle","Math","PI","sqrt","n","length","index","angle","x","cos","y","sin","sx","sy","center","initializeNodes","links","dataset","txTestData","rng","seedrandom","prevNode","floor","pow","startPoint","endPoint","generateLinks","nodeData","time","filterNodeData","linkData","filterLinkData","call","svg","drawInitNodes","nodesData","linksData","p","exit","l","drawLinkedNodes","ReactTooltip","rebuild","TXViz","txVizHash","startTime","endTime","rangeVal","setrangeVal","play","setPlay","playSvg","btnSvg","setBtnSvg","inputRef","setRangeColor","value","progress","background","timer","setInterval","clearInterval","cornerDecorations","Array","e","src","corner","alt","fill","opacity","type","min","max","onChange","event","target","pauseSvg","cancel","getWindowDimensions","window","innerWidth","innerHeight","SearchBox","isOpen","setIsOpen","searchTX","setSearchTX","toggleClass","onKeyPress","key","App","setTxVizHash","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","geoMiller","scale","rotate","translate","position","left","top","transform","decorationTop","decorationBottom","legend","x1","y1","x2","y2","stroke","strokeWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.900c1d17.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nodes.16a1ae4c.csv\";","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport data from \"../data/nodes.csv\";\r\n\r\nconst MapNodes = (props) => {\r\n  const txsInfo = props.txsInfo;\r\n  const scaleInfo = props.scaleInfo;\r\n\r\n  const projection = scaleInfo.projection;\r\n  const centerStyle = scaleInfo.centerStyle;\r\n\r\n  let m = new Map();\r\n  let s = new Set();\r\n  for (let i = 0; i < 100; i++) {\r\n    m.set(i.toString(), 0);\r\n  }\r\n  for (let i in txsInfo) {\r\n    const node = txsInfo[i].node;\r\n    const hash = txsInfo[i].hash;\r\n    m.set(node, m.get(node) + 1);\r\n    s.add(hash);\r\n  }\r\n  const txNum = s.size;\r\n\r\n  d3.csv(data).then(function (data) {\r\n    const nodeGeoInfo = data;\r\n\r\n    d3.selectAll(\".node\").remove();\r\n\r\n    const nodeSvg = d3\r\n      .select(\".nodes\")\r\n      .append(\"g\")\r\n      .attr(\"class\", \"node\")\r\n      .selectAll(\"circle\")\r\n      .data(nodeGeoInfo)\r\n      .enter();\r\n\r\n    nodeSvg\r\n      .append(\"circle\")\r\n      .attr(\"cx\", function (d) {\r\n        return projection([d.long, d.lat])[0];\r\n      })\r\n      .attr(\"cy\", function (d) {\r\n        return projection([d.long, d.lat])[1];\r\n      })\r\n      .attr(\"r\", function (d) {\r\n        return (4 * m.get(d.id)) / txNum;\r\n      })\r\n      .style(\"fill\", \"#18efb1\")\r\n      .style(\"opacity\", function (d) {\r\n        return (m.get(d.id) / txNum) * 0.8;\r\n      });\r\n\r\n    // nodeSvg\r\n    //   .append(\"circle\")\r\n    //   .attr(\"cx\", function (d) {\r\n    //     return projection([d.long, d.lat])[0];\r\n    //   })\r\n    //   .attr(\"cy\", function (d) {\r\n    //     return projection([d.long, d.lat])[1];\r\n    //   })\r\n    //   .attr(\"r\", function (d) {\r\n    //     return (6 * m.get(d.id)) / txNum;\r\n    //   })\r\n    //   .style(\"fill\", \"#18efb1\")\r\n    //   .style(\"opacity\", function (d) {\r\n    //     return (m.get(d.id) / txNum) * 0.1;\r\n    //   });\r\n\r\n    // nodeSvg\r\n    //   .append(\"circle\")\r\n    //   .attr(\"cx\", function (d) {\r\n    //     return projection([d.long, d.lat])[0];\r\n    //   })\r\n    //   .attr(\"cy\", function (d) {\r\n    //     return projection([d.long, d.lat])[1];\r\n    //   })\r\n    //   .attr(\"r\", function (d) {\r\n    //     return (9 * m.get(d.id)) / txNum;\r\n    //   })\r\n    //   .style(\"fill\", \"#18efb1\")\r\n    //   .style(\"opacity\", function (d) {\r\n    //     return (m.get(d.id) / txNum) * 0.03;\r\n    //   });\r\n  });\r\n\r\n  return (\r\n    <svg\r\n      style={centerStyle}\r\n    >\r\n      <g className=\"nodes\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default MapNodes;\r\n","const TXList = (props) => {\r\n  const txs = props.txList;\r\n  const txVizHashChanger = props.txVizHashChanger;\r\n\r\n  let listItems = [];\r\n  for (let txKey of txs.keys()) {\r\n    const unix_timestamp = txs.get(txKey);\r\n    const date = new Date(unix_timestamp);\r\n    const hours = date.getHours();\r\n    const minutes = \"0\" + date.getMinutes();\r\n    const seconds = \"0\" + date.getSeconds();\r\n    // Will display time in 10:30:23 format\r\n    const formattedTime =\r\n      hours + \":\" + minutes.substr(-2) + \":\" + seconds.substr(-2);\r\n\r\n    const listItem = (\r\n      <li key={txKey} onClick={() => txVizHashChanger(txKey)}>\r\n        <span style={{ color: \"#18EFB1\", fontSize: \"12px\" }}>\r\n          {/* {new Date(txs.get(txKey)).toString()} */}\r\n          {formattedTime}\r\n        </span>\r\n        <br />\r\n        {txKey}\r\n      </li>\r\n    );\r\n    listItems.push(listItem);\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      <li key=\"test\" onClick={() => txVizHashChanger(\"0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb\")}>\r\n        <span style={{ color: \"#18EFB1\", fontSize: \"12px\" }}>\r\n          THISISFORTEST\r\n        </span>\r\n        <br />\r\n        0x365698b50ca0da75dca2c87f9e7b563811d3b5813736b8cc62cc3b106faceb\r\n      </li>\r\n      {listItems}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TXList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MapNodes from \"./MapNodes\";\r\nimport TXList from \"./TXList\";\r\nimport \"../css/TXs.css\";\r\n\r\nconst TXs = (props) => {\r\n  const [txList, setTxList] = useState(new Map());\r\n  const [txsInfo, setTxsInfo] = useState([]);\r\n\r\n  const ws = new WebSocket(\"ws://localhost:8887\"); //18115, 8887\r\n\r\n  const initWebsocket = () => {\r\n    ws.onopen = function () {\r\n      console.log(\"CONNECTED\");\r\n      ws.send(\r\n        '{\"id\": 2, \"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": [\"new_transaction\"]}'\r\n      );\r\n    };\r\n    ws.onmessage = function (evt) {\r\n      // fetch data in regular time??\r\n      const txInfo = JSON.parse(evt.data);\r\n      const currTime = Date.now();\r\n      setTxsInfo((txsInfo) => {\r\n        const temp = [...txsInfo, txInfo];\r\n        return temp.filter((tx) => currTime - tx.timestamp < 10000);\r\n      });\r\n\r\n      const txHash = JSON.parse(evt.data).hash;\r\n      const timestamp = Number(JSON.parse(evt.data).timestamp);\r\n\r\n      const newTx = new Map([[txHash, timestamp]]);\r\n      setTxList((txList) => {\r\n        // BUG: may show one tx repeatedly\r\n        if (!txList.has(txHash)) {\r\n          return new Map([...newTx, ...txList].slice(0, 6));\r\n        } else {\r\n          return txList;\r\n        }\r\n      });\r\n    };\r\n    ws.onerror = function (evt) {\r\n      console.log(\"ERROR:\" + evt);\r\n    };\r\n    ws.onclose = function (evt) {\r\n      console.log(\"DISCONNECTED\");\r\n      initWebsocket();\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    initWebsocket();\r\n    return () => {\r\n      ws.close();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div style={props.centerStyle}>\r\n      <div>\r\n        <MapNodes txsInfo={txsInfo} scaleInfo={props} />\r\n      </div>\r\n      <div id=\"tx-list\">\r\n        <TXList txList={txList} txVizHashChanger={props.txVizHashChanger} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TXs;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport * as topojson from \"topojson\";\r\nimport { geoPath } from \"d3-geo\";\r\nimport countriesData from \"../data/countries.topo.json\";\r\n\r\nconst WorldMap = (props) => {\r\n  const worldMap = useRef();\r\n\r\n  const centerStyle = props.centerStyle;\r\n  const projection = props.projection;\r\n\r\n  const path = geoPath().projection(projection).pointRadius(1);\r\n  const mapData = topojson.feature(\r\n    countriesData,\r\n    countriesData.objects.countries\r\n  ).features;\r\n\r\n  useEffect(() => {\r\n    d3.selectAll(\"path\").remove();\r\n\r\n    d3.select(worldMap.current)\r\n      .selectAll(\"path\")\r\n      .data(mapData)\r\n      .enter()\r\n      .append(\"path\")\r\n      .attr(\"d\", path)\r\n      .style(\"fill\", \"#1F1F1F\")\r\n      .style(\"stroke\", \"#090909\")\r\n      .style(\"stroke-width\", 0.7);\r\n  }, [props]);\r\n\r\n  return (\r\n    <svg\r\n      style={centerStyle}\r\n    >\r\n      <g className=\"world-map\" ref={worldMap} />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default WorldMap;\r\n","import React, { useRef, useEffect, Fragment } from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport {\r\n  initializeNodes,\r\n  drawInitNodes,\r\n  drawLinkedNodes,\r\n} from \"../helpers/txNodes\";\r\nimport {\r\n  generateLinks,\r\n  filterNodeData,\r\n  filterLinkData,\r\n} from \"../helpers/processData\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst TXNodes = (props) => {\r\n  const vizContainer = useRef();\r\n  const width = props.width;\r\n  const height = props.height - 40;\r\n\r\n  const nodes = initializeNodes(width / 2, height / 2);\r\n  const links = generateLinks();\r\n  let nodeData = filterNodeData(props.time);\r\n  let linkData = filterLinkData(props.time, links);\r\n\r\n  useEffect(() => {\r\n    d3.select(vizContainer.current)\r\n      .call((svg) => drawInitNodes(svg, nodes))\r\n      .call((svg) => drawLinkedNodes(svg, nodes, nodeData, linkData));\r\n    ReactTooltip.rebuild();\r\n  }, [nodes, nodeData, linkData]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <svg ref={vizContainer} style={{ height: height, width: width }} />\r\n      <ReactTooltip />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TXNodes;\r\n","import * as d3 from \"d3\";\r\n\r\nconst R = 2.5;\r\nconst SPACING = 15;\r\nconst NODES_NUM = 100;\r\n\r\nexport const initializeNodes = (translateX, translateY) => {\r\n  const numNodes = NODES_NUM;\r\n  let nodes = d3.range(numNodes).map(function () {\r\n    return { radius: R };\r\n  });\r\n\r\n  const initialRadius = SPACING,\r\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\r\n\r\n  for (let i = 0, n = nodes.length, node; i < n; ++i) {\r\n    node = nodes[i];\r\n    node.index = i;\r\n    // if (isNaN(node.x) || isNaN(node.y)) {\r\n    const radius = initialRadius * Math.sqrt(0.5 + i),\r\n      angle = i * initialAngle;\r\n    node.x = radius * Math.cos(angle);\r\n    node.y = radius * Math.sin(angle);\r\n    // }\r\n    node.id = \"node\" + i;\r\n  }\r\n\r\n  function center(x, y) {\r\n    let i,\r\n      sx = 0,\r\n      sy = 0;\r\n    const n = nodes.length;\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      let node = nodes[i];\r\n      sx += node.x;\r\n      sy += node.y;\r\n    }\r\n\r\n    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {\r\n      let node = nodes[i];\r\n      node.x -= sx;\r\n      node.y -= sy;\r\n    }\r\n  }\r\n\r\n  center(translateX, translateY);\r\n\r\n  return nodes;\r\n};\r\n\r\nexport const drawInitNodes = (svg, nodes) => {\r\n  svg\r\n    .selectAll(\"circle\")\r\n    .data(nodes)\r\n    .enter()\r\n    .append(\"circle\")\r\n    .attr(\"r\", function (d) {\r\n      return d.radius;\r\n    })\r\n    .attr(\"cx\", function (d) {\r\n      return d.x;\r\n    })\r\n    .attr(\"cy\", function (d) {\r\n      return d.y;\r\n    })\r\n    .attr(\"id\", function (d) {\r\n      return d.id;\r\n    })\r\n    .attr(\"data-tip\", function (d) {\r\n      return d.id;\r\n    })\r\n    // .append(\"svg:title\")\r\n    // .text(function(d) {\r\n    //   return d.id;\r\n    // })\r\n    .style(\"fill\", \"#E6E6E6\");\r\n\r\n  return svg.node();\r\n};\r\n\r\nexport const drawLinkedNodes = (svg, nodes, nodesData, linksData) => {\r\n  // console.log(nodesData);\r\n  const p = svg.selectAll(\".recieved\").data(nodesData);\r\n  p.enter()\r\n    .append(\"circle\")\r\n    .attr(\"class\", \"recieved\")\r\n    .attr(\"r\", R)\r\n    .attr(\"cx\", function (d) {\r\n      return nodes[d].x;\r\n    })\r\n    .attr(\"cy\", function (d) {\r\n      return nodes[d].y;\r\n    })\r\n    .attr(\"data-tip\", function (d) {\r\n      return nodes[d].id;\r\n    })\r\n    .style(\"fill\", \"#18EFB1\");\r\n  p.exit().remove();\r\n\r\n  const l = svg.selectAll(\".connect\").data(linksData);\r\n  l.enter().append(\"line\").attr(\"class\", \"connect\");\r\n  l.style(\"stroke\", \"#18EFB1\")\r\n    .attr(\"x1\", function (d) {\r\n      return nodes[d.startPoint].x;\r\n    })\r\n    .attr(\"y1\", function (d) {\r\n      return nodes[d.startPoint].y;\r\n    })\r\n    .attr(\"x2\", function (d) {\r\n      return nodes[d.endPoint].x;\r\n    })\r\n    .attr(\"y2\", function (d) {\r\n      return nodes[d.endPoint].y;\r\n    });\r\n  l.exit().remove();\r\n\r\n  return svg.node();\r\n};\r\n","import txTestData from \"../data/txTestData.json\";\r\nimport seedrandom from \"seedrandom\";\r\n\r\nexport const generateLinks = () => {\r\n  const dataset = txTestData.tx;\r\n  const rng = seedrandom('TXTXTXTXTXTXTXT0'); // using tx's hash as seed\r\n  let links = [];\r\n  for (let i = 1; i < dataset.length; i++) {\r\n    let prevNode = i;\r\n    while (dataset[prevNode].timestamp == dataset[i].timestamp) {\r\n      prevNode = Math.floor(Math.pow(rng(), 0.5) * i);\r\n    }\r\n    links.push({startPoint: prevNode, endPoint: i, timestamp: dataset[i].timestamp});\r\n  }\r\n  return links;\r\n}\r\n\r\nexport const filterNodeData = (time) => {\r\n  const dataset = txTestData.tx;\r\n  let i = 0;\r\n  let nodeData = [];\r\n  while (i < dataset.length && dataset[i].timestamp <= time) {\r\n    nodeData.push(i);\r\n    i += 1;\r\n  }\r\n  return nodeData;\r\n}\r\n\r\nexport const filterLinkData = (time, links) => {\r\n  let i = 0;\r\n  let linkData = [];\r\n  while (i < links.length && links[i].timestamp <= time) {\r\n    linkData.push(links[i]);\r\n    i += 1;\r\n  }\r\n  if (linkData.length > 40) {\r\n    linkData = linkData.slice(-40);\r\n  }\r\n  return linkData;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/corner.f624a045.svg\";","export default __webpack_public_path__ + \"static/media/cancel.179c3d84.svg\";","export default __webpack_public_path__ + \"static/media/play.1e6239bf.svg\";","export default __webpack_public_path__ + \"static/media/pause.2668d8b8.svg\";","import { useState, useEffect, useRef } from \"react\";\r\nimport TXNodes from \"./TXNodes\";\r\nimport \"../css/TXViz.scss\";\r\nimport corner from \"../images/corner.svg\";\r\nimport cancel from \"../images/cancel.svg\";\r\nimport playSvg from \"../images/play.svg\";\r\nimport pauseSvg from \"../images/pause.svg\";\r\n\r\nconst TXViz = (props) => {\r\n  const txVizHash = props.txVizHash;\r\n  const txVizHashChanger = props.txVizHashChanger;\r\n\r\n  const width = 670;\r\n  const height = 380;\r\n\r\n  const startTime = 1622463474248;\r\n  const endTime = 1622463476577;\r\n  const [rangeVal, setrangeVal] = useState(startTime);\r\n  const [play, setPlay] = useState(false);\r\n  const [btnSvg, setBtnSvg] = useState(playSvg);\r\n\r\n  const inputRef = useRef();\r\n  const activeRangeColor = \"#18EFB1\";\r\n  const rangeBackgroundColor = \"#E6E6E6\";\r\n  const setRangeColor = (value) => {\r\n    const progress = ((value - startTime) / (endTime - startTime)) * 100 + \"%\";\r\n    inputRef.current.style.background = `linear-gradient(90deg, ${activeRangeColor} 0% ${progress}, ${rangeBackgroundColor} ${progress} 100%)`;\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const value = Number(event.target.value);\r\n    setrangeVal(value);\r\n    setRangeColor(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (rangeVal == endTime) {\r\n      setBtnSvg(playSvg);\r\n      setPlay(false);\r\n    }\r\n    if (play) {\r\n      const timer = setInterval(() => {\r\n        setrangeVal(rangeVal + 1);\r\n        setRangeColor(rangeVal);\r\n      }, 1);\r\n      return () => clearInterval(timer);\r\n    }\r\n  }, [rangeVal, play]);\r\n\r\n  const cornerDecorations = [...Array(4)].map((e, i) => (\r\n    <img id={\"corner\" + i} src={corner} alt=\"\" key={i} />\r\n  ));\r\n\r\n  return (\r\n    <div style={{ width: width, height: height }}>\r\n      <svg id=\"bg\" style={{ width: width, height: height }}>\r\n        <rect\r\n          x={0}\r\n          y={0}\r\n          width={width}\r\n          height={height}\r\n          style={{ fill: \"#1F1F1F\", opacity: 0.8 }}\r\n        />\r\n      </svg>\r\n\r\n      {cornerDecorations}\r\n\r\n      <div id=\"tx-nodes\">\r\n        <TXNodes time={rangeVal} width={width} height={height} />\r\n      </div>\r\n\r\n      <p id=\"tx-hash\">{txVizHash}</p>\r\n\r\n      <div id=\"timeline\">\r\n        <p className=\"timeline-time\">{rangeVal}</p>\r\n        <input\r\n          ref={inputRef}\r\n          type=\"range\"\r\n          className=\"timeline-slider\"\r\n          min={startTime}\r\n          max={endTime}\r\n          value={rangeVal}\r\n          onChange={handleChange}\r\n        />\r\n        <img\r\n          id=\"play-button\"\r\n          onClick={() => {\r\n            if (rangeVal == endTime) {\r\n              setrangeVal(startTime);\r\n            }\r\n            if (play) {\r\n              setBtnSvg(playSvg);\r\n            } else {\r\n              setBtnSvg(pauseSvg);\r\n            }\r\n            setPlay(!play);\r\n          }}\r\n          src={btnSvg}\r\n          alt=\"play button\"\r\n        />\r\n      </div>\r\n\r\n      <img\r\n        id=\"cancel-button\"\r\n        onClick={() => {\r\n          txVizHashChanger(\"\");\r\n        }}\r\n        src={cancel}\r\n        alt=\"cancel button\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TXViz;\r\n","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth, innerHeight } = window;\r\n  return {\r\n    innerWidth,\r\n    innerHeight\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}","import React, { useState } from \"react\";\r\nimport \"../css/SearchBox.scss\";\r\n\r\nconst SearchBox = (props) => {\r\n  // TODO: handle error, maxlength, etc.\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [searchTX, setSearchTX] = useState();\r\n  const txVizHashChanger = props.txVizHashChanger;\r\n\r\n  const toggleClass = () => {\r\n    if (isOpen) {\r\n      txVizHashChanger(searchTX);\r\n    }\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div className={isOpen ? \"search open\" : \"search\"}>\r\n      <input\r\n        type=\"search\"\r\n        className=\"search-input\"\r\n        value={searchTX}\r\n        onChange={(e) => setSearchTX(e.target.value)}\r\n        onKeyPress={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            toggleClass();\r\n          }\r\n        }}\r\n      />\r\n      <span className=\"search-button\" onClick={toggleClass}>\r\n        <span className=\"search-icon\"></span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","export default __webpack_public_path__ + \"static/media/decorationTop.d3499909.svg\";","export default __webpack_public_path__ + \"static/media/decorationBottom.bcc4ea3d.svg\";","export default __webpack_public_path__ + \"static/media/legend.79494a87.svg\";","import React, { useState } from \"react\";\r\nimport \"./css/App.css\";\r\nimport TXs from \"./components/TXs\";\r\nimport WorldMap from \"./components/WorldMap\";\r\nimport TXViz from \"./components/TXViz\";\r\nimport useWindowDimensions from \"./hooks/useWindowDimensions\";\r\nimport { geoMiller } from \"d3-geo-projection\";\r\nimport SearchBox from \"./components/SearchBox\";\r\nimport decorationTop from \"./images/decorationTop.svg\";\r\nimport decorationBottom from \"./images/decorationBottom.svg\";\r\nimport legend from \"./images/legend.svg\";\r\n\r\nfunction App() {\r\n  const [txVizHash, setTxVizHash] = useState(\"\");\r\n\r\n  const { innerWidth, innerHeight } = useWindowDimensions();\r\n  let width, height;\r\n  if (innerHeight > (innerWidth - 20) / 2.03) {\r\n    width = innerWidth - 20;\r\n    height = width / 2.03;\r\n  } else {\r\n    height = innerHeight;\r\n    width = height * 2.03;\r\n  }\r\n  const projection = geoMiller()\r\n    .scale((width / 630) * 100)\r\n    .rotate([-11, 0])\r\n    .translate([width / 2, height * 0.645]);\r\n\r\n  const centerStyle = {\r\n    height: height,\r\n    width: width,\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    top: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  };\r\n\r\n  return (\r\n    <div style={centerStyle}>\r\n      <div id=\"world-map\">\r\n        <WorldMap projection={projection} centerStyle={centerStyle} />\r\n      </div>\r\n\r\n      <div id=\"cryptape\">\r\n        <h1>CRYPTAPE</h1>\r\n      </div>\r\n      <div id=\"decoration-top\">\r\n        <img src={decorationTop} width={width * 0.1} alt=\"\" />\r\n      </div>\r\n      <div id=\"decoration-bottom\">\r\n        <img src={decorationBottom} width={width * 0.1} alt=\"\" />\r\n      </div>\r\n      <div id=\"legend\">\r\n        <img src={legend} width={width * 0.04} alt=\"\" />\r\n      </div>\r\n\r\n      <div id=\"txs\">\r\n        <TXs\r\n          projection={projection}\r\n          centerStyle={centerStyle}\r\n          txVizHashChanger={setTxVizHash}\r\n        />\r\n      </div>\r\n\r\n      <div id=\"tx-viz\">\r\n        {txVizHash === \"\" ? null : (\r\n          <TXViz txVizHash={txVizHash} txVizHashChanger={setTxVizHash} />\r\n        )}\r\n      </div>\r\n\r\n      <div id=\"bottom-line\">\r\n        <svg style={{ width: width * 0.6, height: \"2px\" }}>\r\n          <line\r\n            x1={0}\r\n            y1={2}\r\n            x2={width * 0.6}\r\n            y2={2}\r\n            style={{ stroke: \"#B8B8B8\", strokeWidth: \"0.5px\" }}\r\n          />\r\n          <rect\r\n            x={width * 0.6 - 670}\r\n            y={0}\r\n            width={2}\r\n            height={2}\r\n            style={{ fill: \"#E6E6E6\" }}\r\n          />\r\n          <rect\r\n            x={width * 0.6 - 2}\r\n            y={0}\r\n            width={2}\r\n            height={2}\r\n            style={{ fill: \"#E6E6E6\" }}\r\n          />\r\n        </svg>\r\n      </div>\r\n\r\n      <div id=\"search-box\">\r\n        <SearchBox txVizHashChanger={setTxVizHash} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}